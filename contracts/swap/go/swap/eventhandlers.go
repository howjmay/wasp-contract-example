// Code generated by schema tool; DO NOT EDIT.

package swap

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var swapHandlers = map[string]func(*SwapEventHandlers, *wasmtypes.WasmDecoder){
	"swap.priceLog": func(evt *SwapEventHandlers, dec *wasmtypes.WasmDecoder) { evt.onSwapPriceLogThunk(dec) },
}

type SwapEventHandlers struct {
	myID uint32
	priceLog func(e *EventPriceLog)
}

var _ wasmlib.IEventHandlers = new(SwapEventHandlers)

func NewSwapEventHandlers() *SwapEventHandlers {
	return &SwapEventHandlers{ myID: wasmlib.EventHandlersGenerateID() }
}

func (h *SwapEventHandlers) CallHandler(topic string, dec *wasmtypes.WasmDecoder) {
	handler := swapHandlers[topic]
	if handler != nil {
		handler(h, dec)
	}
}

func (h *SwapEventHandlers) ID() uint32 {
	return h.myID
}

func (h *SwapEventHandlers) OnSwapPriceLog(handler func(e *EventPriceLog)) {
	h.priceLog = handler
}

type EventPriceLog struct {
	Timestamp uint64
	BlockNum uint64
	Price uint64
}

func (h *SwapEventHandlers) onSwapPriceLogThunk(dec *wasmtypes.WasmDecoder) {
	if h.priceLog == nil {
		return
	}
	e := &EventPriceLog{}
	e.Timestamp = wasmtypes.Uint64Decode(dec)
	e.BlockNum = wasmtypes.Uint64Decode(dec)
	e.Price = wasmtypes.Uint64Decode(dec)
	dec.Close()
	h.priceLog(e)
}
