// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the schema definition file instead

package swap

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var swapHandlers = map[string]func(*SwapEventHandlers, []string){
	"swap.priceLog": func(evt *SwapEventHandlers, msg []string) { evt.onSwapPriceLogThunk(msg) },
}

type SwapEventHandlers struct {
	priceLog func(e *EventPriceLog)
}

var _ wasmlib.IEventHandlers = new(SwapEventHandlers)

func (h *SwapEventHandlers) CallHandler(topic string, params []string) {
	handler := swapHandlers[topic]
	if handler != nil {
		handler(h, params)
	}
}

func (h *SwapEventHandlers) OnSwapPriceLog(handler func(e *EventPriceLog)) {
	h.priceLog = handler
}

type EventPriceLog struct {
	Timestamp uint64
	BlockNum uint64
	Price uint64
}

func (h *SwapEventHandlers) onSwapPriceLogThunk(msg []string) {
	if h.priceLog == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventPriceLog{Timestamp: evt.Timestamp()}
	e.BlockNum = wasmtypes.Uint64FromString(evt.Decode())
	e.Price = wasmtypes.Uint64FromString(evt.Decode())
	h.priceLog(e)
}
