// Code generated by schema tool; DO NOT EDIT.

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use swap::*;
use crate::*;

const EXPORT_MAP: ScExportMap = ScExportMap {
    names: &[
        FUNC_SET_PRICE,
        VIEW_GET_PRICE,
    ],
    funcs: &[
        func_set_price_thunk,
    ],
    views: &[
        view_get_price_thunk,
    ],
};

pub fn on_dispatch(index: i32) {
    EXPORT_MAP.dispatch(index);
}

pub struct SetPriceContext {
    pub events:  SwapEvents,
    pub results: MutableSetPriceResults,
    pub state:   MutableSwapState,
}

fn func_set_price_thunk(ctx: &ScFuncContext) {
    ctx.log("swap.funcSetPrice");
    let f = SetPriceContext {
        events:  SwapEvents {},
        results: MutableSetPriceResults::new(),
        state:   MutableSwapState::new(),
    };
    func_set_price(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("swap.funcSetPrice ok");
}

pub struct GetPriceContext {
    pub results: MutableGetPriceResults,
    pub state:   ImmutableSwapState,
}

fn view_get_price_thunk(ctx: &ScViewContext) {
    ctx.log("swap.viewGetPrice");
    let f = GetPriceContext {
        results: MutableGetPriceResults::new(),
        state:   ImmutableSwapState::new(),
    };
    view_get_price(ctx, &f);
    ctx.results(&f.results.proxy);
    ctx.log("swap.viewGetPrice ok");
}
