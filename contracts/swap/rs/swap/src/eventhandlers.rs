// Code generated by schema tool; DO NOT EDIT.

use std::collections::HashMap;

use wasmlib::*;

use crate::*;

pub struct SwapEventHandlers {
    my_id: u32,
    swap_handlers: HashMap<&'static str, fn(evt: &SwapEventHandlers, dec: &mut WasmDecoder)>,

    price_log: Box<dyn Fn(&EventPriceLog)>,
}

impl IEventHandlers for SwapEventHandlers {
    fn call_handler(&self, topic: &str, dec: &mut WasmDecoder) {
        if let Some(handler) = self.swap_handlers.get(topic) {
            handler(self, dec);
        }
    }

    fn id(&self) -> u32 {
        self.my_id
    }
}

unsafe impl Send for SwapEventHandlers {}
unsafe impl Sync for SwapEventHandlers {}

impl SwapEventHandlers {
    pub fn new() -> SwapEventHandlers {
        let mut handlers: HashMap<&str, fn(evt: &SwapEventHandlers, dec: &mut WasmDecoder)> = HashMap::new();
        handlers.insert("swap.priceLog", |e, m| { (e.price_log)(&EventPriceLog::new(m)); });
        return SwapEventHandlers {
            my_id: EventHandlers::generate_id(),
            swap_handlers: handlers,
            price_log: Box::new(|_e| {}),
        };
    }

    pub fn on_swap_price_log<F>(&mut self, handler: F)
        where F: Fn(&EventPriceLog) + 'static {
        self.price_log = Box::new(handler);
    }
}

pub struct EventPriceLog {
    pub timestamp: u64,
    pub block_num: u64,
    pub price: u64,
}

impl EventPriceLog {
    pub fn new(dec: &mut WasmDecoder) -> EventPriceLog {
        EventPriceLog {
            timestamp: uint64_decode(dec),
            block_num: uint64_decode(dec),
            price: uint64_decode(dec),
        }
    }
}
