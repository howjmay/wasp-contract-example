// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the schema definition file instead

package recorder

import (
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"
	"github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib/wasmtypes"
)

var recorderHandlers = map[string]func(*RecorderEventHandlers, []string){
	"recorder.priceHistory": func(evt *RecorderEventHandlers, msg []string) { evt.onRecorderPriceHistoryThunk(msg) },
}

type RecorderEventHandlers struct {
	priceHistory func(e *EventPriceHistory)
}

var _ wasmlib.IEventHandlers = new(RecorderEventHandlers)

func (h *RecorderEventHandlers) CallHandler(topic string, params []string) {
	handler := recorderHandlers[topic]
	if handler != nil {
		handler(h, params)
	}
}

func (h *RecorderEventHandlers) OnRecorderPriceHistory(handler func(e *EventPriceHistory)) {
	h.priceHistory = handler
}

type EventPriceHistory struct {
	Timestamp uint64
	Price uint64
}

func (h *RecorderEventHandlers) onRecorderPriceHistoryThunk(msg []string) {
	if h.priceHistory == nil {
		return
	}
	evt := wasmlib.NewEventDecoder(msg)
	e := &EventPriceHistory{Timestamp: evt.Timestamp()}
	e.Price = wasmtypes.Uint64FromString(evt.Decode())
	h.priceHistory(e)
}
