// Code generated by schema tool; DO NOT EDIT.

use std::collections::HashMap;

use wasmlib::*;

use crate::*;

pub struct RecorderEventHandlers {
    my_id: u32,
    recorder_handlers: HashMap<&'static str, fn(evt: &RecorderEventHandlers, dec: &mut WasmDecoder)>,

    price_history: Box<dyn Fn(&EventPriceHistory)>,
}

impl IEventHandlers for RecorderEventHandlers {
    fn call_handler(&self, topic: &str, dec: &mut WasmDecoder) {
        if let Some(handler) = self.recorder_handlers.get(topic) {
            handler(self, dec);
        }
    }

    fn id(&self) -> u32 {
        self.my_id
    }
}

unsafe impl Send for RecorderEventHandlers {}
unsafe impl Sync for RecorderEventHandlers {}

impl RecorderEventHandlers {
    pub fn new() -> RecorderEventHandlers {
        let mut handlers: HashMap<&str, fn(evt: &RecorderEventHandlers, dec: &mut WasmDecoder)> = HashMap::new();
        handlers.insert("recorder.priceHistory", |e, m| { (e.price_history)(&EventPriceHistory::new(m)); });
        return RecorderEventHandlers {
            my_id: EventHandlers::generate_id(),
            recorder_handlers: handlers,
            price_history: Box::new(|_e| {}),
        };
    }

    pub fn on_recorder_price_history<F>(&mut self, handler: F)
        where F: Fn(&EventPriceHistory) + 'static {
        self.price_history = Box::new(handler);
    }
}

pub struct EventPriceHistory {
    pub timestamp: u64,
    pub price: u64,
}

impl EventPriceHistory {
    pub fn new(dec: &mut WasmDecoder) -> EventPriceHistory {
        EventPriceHistory {
            timestamp: uint64_decode(dec),
            price: uint64_decode(dec),
        }
    }
}
